plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'org.zerock'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    // log4j2을 사용할 때 logging이랑 충돌 방지
    all {
        exclude module: 'spring-boot-starter-logging'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'

    // JWT 문자열의 생성과 검증을 위한 라이브러리
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // JWT 문자열들을 얻기 위해서 전송되는 JSON문자열을 HttpServletRequest로 처리하기 위해
    // JSON 처리를 쉽게 할 수 있는 Gson 라이브러리 추가
    implementation 'com.google.code.gson:gson:2.8.9'

    // Swagger UI 준비
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // log4j2, test log4j2 추가
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // security 의존성 추가
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // OAuth2 Client 라이브러리 사용
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:3.1.2'

    // @Valid를 이용해서 서버에서도 검증한 후에 등록하는 방식을 적용
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Model Mapper 라이브러리 추가
    implementation 'org.modelmapper:modelmapper:3.1.0'

    // Thymeleaf 레이아웃 관련 라이브러리 의존성
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // Spring Boot Devtools 설정
    // 제공하는 대표적인 기능들
    // Automatic Restart : classpath에 있는 파일이 변경될 때마다 애플리케이션을 자동 재시작
    // Live Reload : 정적 자원(html, css, js) 수정 시 새로 고침 없이 바로 적용
    // Property Defaults : Thymeleaf는 기본적으로 성능을 향상시키기 위해 캐싱 기능을 사용
    // 하지만 개발 과정에서는 수정한 소스가 제대로 반영되지 않을 수 있기에 cache의 기본값을 false 지정
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // === QueryDsl 시작 ===

    // == 스프링 부트 3.0 이상 ==
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:" +
            "${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // == 스프링 부트 3.0 미만 ==
    /*
    implementation 'com.querydsl:querydsl-jpa'
    annotationProcessor "com.querydsl:querydsl-apt:" +
            "${dependencyManagement.importedProperties['querydsl.version']}:jpa"
            */

    // === QueryDsl 끝 ===

    // Thymeleaf Layout Dialect 의존성 추가
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

    // Thumbnailator : 첨부 파일이 이미지일 때는 용량을 줄여서 작은 이미지(이하 섬네일)를 생성하고
    // 이를 나중에 사용하도록 구성해야만 한다. 이를 처리하기 위해 Thumbnailator 라이브러리 이용
    implementation 'net.coobird:thumbnailator:0.4.19'
    
}

test {
    useJUnitPlatform()
}

// QueryDsl 빌드 옵션 (선택)
// QueryDsl 디렉토리 경로
def querydslDir = "$buildDir/generated/querydsl"

// 경로 추가 >> QueryDsl 소스 코드 컴파일 시 빌드
sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

// 컴파일 설정(AnnotationProcessor가 생성하는 소스코드를 해당 경로로 설정)
tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

// clean실행 시 마지막 작업으로 디렉토리(QClass) 삭제 >> 충돌 방지
clean.doLast {
    file(querydslDir).deleteDir()
}

//쿼리dsl 관련 설정 추가 3.0 미만
/*
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl { // 실행
    options.annotationProcessorPath = configurations.querydsl
}
*/